<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@*Модель данных
• Clients (минимально содержит поля ID, Name, DateCreate, Status) – клиенты, таблица содержит данные о клиентах, дате создания клиента, статусе клиента (потенциальный, активный, не активный)
• Orders (минимально содержит поля ID, Client_ID – внешний ключ для таблицы клиентов, Decsription, Date, Price, Status, CurrencyID) – заказы, таблица содержит данные о заказах клиента, обязательные поля ссылка на клиента, описание заказа, дата заказа, стоимость, статус заказа (новый, выполнен), валюта.
Полей в моделях при необходимости может быть больше (на усмотрение исполнителя).



Заказы могут создаваться только для клиентов в статусе активный.
При создании заказа ему автоматически присваивается статус Новый.
Перевод в статус Выполнен в ручном режиме (через редактирование карточки заказа или другим способом на усмотрение исполнителя).
Удаление заказа доступно только в статусе Новый.
Изменение статуса клиента:
при добавлении – Потенциальный, перевод в статус Активный в ручном режиме (через редактирование карточки клиента или другим способом на усмотрение исполнителя), перевод в статус Не Активный только для клиентов без заказов в статусе Новый.
Удаление клиента доступно только при отсутствии заказов.
Справочник валют/курсов валют реализовать на сове усмотрение.
Дополнительно можно реализовать сервис приема курсов валют. Для получения курсов можно использовать любой открытый API.

На форме со списком всех заказов реализовать поиск/фильтрацию по клиенту, дате заказа, стоимости, валюте.
На главное странице вывести статистику заказов клиентов с конвертацией стоимости в выбранную валюту.
Дополнительное задание.
Реализация авторизации пользователя (способ на усмотрение исполнителя, включая сторонние сервисы).
Фиксация изменений данных по клиентам и заказам с указанием пользователя и даты/времени редактирования.
Логгирование.
Покрытие Unit-тестами основной части логики.
Применение принципов SOLID/Clean Architecture.*@

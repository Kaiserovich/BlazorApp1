@page "/clients"
@inject IRepositoryWrapper db

<PageTitle>List of clients</PageTitle>

<h2>List of clients</h2>
<div class="row">
    <div class="col">
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Create Data</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <GenericList ListOfItems="clients">
                        <ItemTemplate Context="client">
                            <RowClient Client="client" DeleteTheClient="DeleteTheClient" />
                        </ItemTemplate>
                    </GenericList>
                    <PopUp @ref="deletePopUp" NameAction="Delete" OnConfirm="OnDeleteConfirmAsync" OnCancel="OnDeleteCancel" isVisibleConfirmButton="!clientToBeDeletedHasOrders">
                        @if (clientToBeDeletedHasOrders)
                        {
                            <div class="text-danger">Client: ID:@clientToBeDeleted.Id cannot be deleted, because deleting a client is available only if there are no orders</div>
                        }
                        else
                        {
                            <div class="text-danger">Do you wish to delete client: ID:@clientToBeDeleted.Id ?</div>
                        }
                    </PopUp>
                </tbody>
            </table>
        </div>
    </div>

    <div class="col-4">
        <AddClient AddTheClient="AddTheClient"/>
    </div>
</div>





@code {
    List<Client> clients;
    PopUp deletePopUp;
    Client clientToBeDeleted;
    bool clientToBeDeletedHasOrders = false;

    protected async override Task OnInitializedAsync()
    {
        clients = await db.Client.GetAllClientsAsync();
    }
    void DeleteTheClient(Client client)
    {
        if (client != null)
        {
            if (db.Order.GetOrdersByClientId(client.Id).Count() == 0)
            {
                clientToBeDeletedHasOrders = false;
            }

            else
            {
                clientToBeDeletedHasOrders = true;
            }
            clientToBeDeleted = client;
            deletePopUp.Show();
        }
    }
    async void OnDeleteConfirmAsync()
    {
        clients.Remove(clientToBeDeleted);
        deletePopUp.Hide();

        db.Client.DeleteClient(clientToBeDeleted);
        await db.SaveAsync();
    }
    void OnDeleteCancel()
    {
        deletePopUp.Hide();
    }
    void AddTheClient(Client client)
    {
        if (client != null)
            clients.Add(client);
    }
}

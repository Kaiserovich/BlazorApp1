@page "/clients"
@inject IRepositoryWrapper db

<PageTitle>List of clients</PageTitle>

<h2>List of clients</h2>
<div class="row">
    <div class="col">
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Create Data</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <GenericList ListOfItems="clients">
                        <ItemTemplate Context="client">
                            <RowClient Client="client" DeleteTheClient="DeleteTheClient" />
                        </ItemTemplate>
                    </GenericList>
                    <PopUp @ref="deletePopUp" NameAction="Delete" OnCancel="OnDeleteCancel" OnConfirm="OnDeleteConfirm">
                        <div class="text-danger">Do you wish to delete client: ID:@clientToBeDeleted.Id Name:@clientToBeDeleted.Name ?</div>
                    </PopUp>
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-4">
        <EditForm Model="newClient" OnValidSubmit="CreateNewClient" class="form-control">
            <span>Create a new client</span>
            <DataAnnotationsValidator />
            <div class="input-group mb-3">
                <span class="input-group-text">Name:</span>
                <InputText @bind-Value="newClient.Name" type="text" class="form-control" placeholder="Client name" />
                <button class="btn btn-outline-success">Add</button>
            </div>
            <ValidationMessage For="(() => newClient.Name)" />
        </EditForm>
    </div>
</div>





@code {
    List<Client> clients;
    PopUp deletePopUp;
    Client clientToBeDeleted;
    Client newClient = new();
    protected async override Task OnInitializedAsync()
    {
        clients = await db.Client.GetAllClientsAsync();
    }
    void DeleteTheClient(Client client)
    {
        if (client != null)
        {
            clientToBeDeleted = client;
            deletePopUp.Show();
        }
    }
    void OnDeleteConfirm()
    {
        db.Client.DeleteClient(clientToBeDeleted);
        db.SaveAsync();
        clients.Remove(clientToBeDeleted);
        clientToBeDeleted = null;
        deletePopUp.Hide();

    }
    void OnDeleteCancel()
    {
        clientToBeDeleted = null;
        deletePopUp.Hide();
    }
    async Task CreateNewClient()
    {
        Client client = new Client()
            {
                Name = newClient.Name,
                DataCreate = DateTime.Now,
                Status = 0
            };
        db.Client.CreateClient(client);
        await db.SaveAsync();
        clients.Add(client);
    }
}

@page "/orders"
@inject IRepositoryWrapper db

<PageTitle>List of orders</PageTitle>

<h2>List of orders</h2>
<div class="row">
    <div class="col">
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Order Id</th>
                        <th>Client Id</th>
                        <th>Decription</th>
                        <th>Date</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Currency Id</th>
                    </tr>
                </thead>
                <tbody>
                    <GenericList ListOfItems="orders">
                        <ItemTemplate Context="order">
                            <RowOrder Order="order" DeleteTheOrder="DeleteTheOrder" />
                        </ItemTemplate>
                    </GenericList>
                    <PopUp @ref="deletePopUp" NameAction="Delete" OnConfirm="OnDeleteConfirmAsync" OnCancel="OnDeleteCancel">
                        <div class="text-danger">Do you wish to delete order: ID:@orderToBeDeleted.Id ?</div>
                    </PopUp>
                </tbody>
            </table>
        </div>
    </div>

    <div class="col col-4">
        <AddOrder AddTheOrder="AddTheOrder" />

    </div>
</div>

@code {
    List<Order>? orders;
    Order orderToBeDeleted;
    PopUp deletePopUp;

    protected async override Task OnInitializedAsync()
    {
        orders = await db.Order.GetAllOrdersAsync();
    }

    void DeleteTheOrder(Order order)
    {
        if (order != null)
        {
            orderToBeDeleted = order;
            deletePopUp.Show();
        }
    }
    async void OnDeleteConfirmAsync()
    {
        orders.Remove(orderToBeDeleted);
        OnDeleteCancel();

        db.Order.DeleteOrder(orderToBeDeleted);
        await db.SaveAsync();

    }
    void OnDeleteCancel()
    {
        deletePopUp.Hide();
    }
    void AddTheOrder(Order order)
    {
        if (order != null)
            orders.Add(order);
    }
}

@page "/orders"
@inject IRepositoryWrapper db

<PageTitle>List of orders</PageTitle>

<h2>List of orders</h2>
  <div class="row">
    <div class="col">
      <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Order Id</th>
                            <th>Client Id</th>
                            <th>Decription</th>
                            <th>Date</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Currency Id</th>
                        </tr>
                    </thead>
                    <tbody>
                        <GenericList ListOfItems="orders">
                            <ItemTemplate Context="order">
                                <RowOrder Order="order" DeleteTheOrder="DeleteTheOrder" />
                            </ItemTemplate>
                        </GenericList>
                        <PopUp @ref="deletePopUp" NameAction="Delete" OnConfirm="OnDeleteConfirm" OnCancel="OnDeleteCancel">
                            <div class="text-danger">Do you wish to delete order: ID:@orderToBeDeleted.Id ?</div>
                        </PopUp>
                    </tbody>
                </table>
            </div>
    </div>

    <div class="col col-4">
        <div class="card-header">
            <h3>Create a new order</H3>
        </div> 

            <div class="card-body">
                <EditForm Model="newOrder" OnValidSubmit="CreateNewOrder" class="form-control">
                    <DataAnnotationsValidator />
                    <div class="input-group mb-3">
                        <span class="input-group-text">Decription:</span>
                        <InputText @bind-Value="newOrder.Decription" type="text" placeholder="Input text"  class="form-control" />
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">Price:</span>
                        <InputNumber @bind-Value="newOrder.Price" type="text" class="form-control" />
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">Client ID:</span>
                        <InputNumber @bind-Value="newOrder.ClientId" type="text" class="form-control" />
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">Currency ID:</span>
                        <InputNumber @bind-Value="newOrder.CurrencyId" type="text" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <ValidationMessage For="(() => newOrder.Decription)" />
                        <ValidationMessage For="(() => newOrder.Price)" />
                        <ValidationMessage For="(() => newOrder.ClientId)" />
                        <ValidationMessage For="(() => newOrder.CurrencyId)" />
                    </div>
                    <div class="mb-3">
                        <button class="btn btn-outline-success">Add</button>
                        <span class="text-danger">@message</span>
                    </div>
                    
                    @if (displaySuccessMessage)
                    {
                        <SuccessMessage/>
                    }
                </EditForm>
                
        </div>
    </div>
  </div>

@code {
    List<Order> orders;
    Order newOrder = new();
    Order orderToBeDeleted;
    PopUp deletePopUp;
    string message;
    bool displaySuccessMessage = false;

    protected async override Task OnInitializedAsync()
    {
        orders = await db.Order.GetAllOrdersAsync();
    }

    async Task CreateNewOrder()
    {
        Client assosiateClient = await db.Client.GetClientByIdAsync(newOrder.ClientId);
        if (assosiateClient is null)
        {
            message = $"Client(ID:{newOrder.ClientId}) does not exist";

        }
        else if (assosiateClient.Status != ClientStatus.Active)
        {
            message = $"Client(ID:{newOrder.ClientId}) does not have an active status";
        }
        else
        {
            displaySuccessMessage = true;
            message = string.Empty;
            Order order = new Order()
                {
                    Decription = newOrder.Decription,
                    Date = DateTime.Now,
                    Price = newOrder.Price,
                    Status = 0,
                    CurrencyId = newOrder.CurrencyId,
                    ClientId = newOrder.ClientId

                };

            db.Order.CreateOrder(order);
            await db.SaveAsync();
            orders.Add(order);
        }
    }
    void DeleteTheOrder(Order order)
    {
        if (order != null)
        {
            orderToBeDeleted = order;
            deletePopUp.Show();
        }
    }
    void OnDeleteConfirm()
    {
        db.Order.DeleteOrder(orderToBeDeleted);
        db.SaveAsync();
        orders.Remove(orderToBeDeleted);
        OnDeleteCancel();

    }
        void OnDeleteCancel()
    {
        orderToBeDeleted = null;
        deletePopUp.Hide();
    }
}

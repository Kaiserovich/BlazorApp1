@inject IRepositoryWrapper db

@if (Order != null)
{
    <div class="card">
        <div class="card-body">
            <EditForm Model="Order" OnValidSubmit="EditTheOrder">
                <DataAnnotationsValidator />
                <div class="input-group mb-3">
                    <span class="input-group-text">Id:</span>
                    <InputNumber @bind-Value="Order.Id" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Decription:</span>
                    <InputText @bind-Value="Order.Decription" class="form-control" disabled="@isDisabledInputs" />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Date:</span>
                    <InputDate @bind-Value="Order.Date" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Price:</span>
                    <InputNumber @bind-Value="Order.Price" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Client ID:</span>
                    <InputNumber @bind-Value="Order.ClientId" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Currency ID:</span>
                    <InputNumber @bind-Value="Order.CurrencyId" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Status:</span>
                    <InputSelect @bind-Value=@Order.Status class="form-control" disabled="@isDisabledInputs">
                        @foreach (var status in Enum.GetValues(typeof(OrderStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>
                @if (isEditMode)
                {
                    <div class="mb-3">
                        <button class="btn btn-success">Save</button>
                    </div>
                }
                <ValidationMessage For="(() => Order.Decription)" />
            </EditForm>

            @if (!isEditMode)
            {
                <div class="mb-3">
                    <button class="btn btn-primary" @onclick="@(() => StartEditOrder())">Edit</button>
                </div>
            }
            @if (displaySuccessMessage)
            {
                <SuccessMessage/>
            }
        </div>
    </div>
}

@code {
    [Parameter] public Order Order { get; set; }

    bool isEditMode = false;
    bool isDisabledInputs = true;
    bool displaySuccessMessage = false;

    void StartEditOrder()
    {
        ChangeEditAndSaveButtonsState();
        displaySuccessMessage = false;
    }
    async void EditTheOrder()
    {
        ChangeEditAndSaveButtonsState();
        displaySuccessMessage = true;

        db.Order.Update(Order);
        await db.SaveAsync();

    }
    void ChangeEditAndSaveButtonsState()
    {
        isEditMode = !isEditMode;
        isDisabledInputs = !isDisabledInputs;
    }
}
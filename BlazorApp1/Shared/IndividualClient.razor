@inject IRepositoryWrapper db

@if (Client != null)
{
    <div class="card">
        <div class="card-body">
            <EditForm Model="Client" OnValidSubmit="EditClient">
                <DataAnnotationsValidator />
                <div class="input-group mb-3">
                    <span class="input-group-text">Id:</span>
                    <InputNumber @bind-Value="Client.Id" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Name:</span>
                    <InputText @bind-Value="Client.Name" class="form-control" disabled="@isDisabledInputs" />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Create Data:</span>
                    <InputDate @bind-Value="Client.DataCreate" class="form-control" disabled />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">Status:</span>
                    <InputSelect @bind-Value=@Client.Status class="form-control" disabled="@isDisabledInputs">
                        @foreach (var status in Enum.GetValues(typeof(ClientStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>
                @if (isEditMode)
                {
                    <div class="mb-3">
                        <button class="btn btn-success">Save</button>
                    </div>
                }
                <ValidationMessage For="(() => Client.Name)" />
            </EditForm>
            @if (!isEditMode)
            {
                <div class="mb-3">
                    <button class="btn btn-primary" @onclick="@(() => StartEditClient())">Edit</button>
                </div>
            }
            @if (displaySuccessMessage)
            {
                <SuccessMessage />
            }
        </div>
    </div>


}
@code {
    [Parameter] public Client Client { get; set; }

    bool isDisabledInputs = true;
    bool isEditMode = false;
    bool displaySuccessMessage = false;

    void StartEditClient()
    {
        displaySuccessMessage = false;
        ChangeEditAndSaveButtonsState();
    }
    async void EditClient()
    {
        db.Client.Update(Client);
        ChangeEditAndSaveButtonsState();
        displaySuccessMessage = true;
        await db.SaveAsync();
    }
    void ChangeEditAndSaveButtonsState()
    {
        isDisabledInputs = !isDisabledInputs;
        isEditMode = !isEditMode;
    }

}
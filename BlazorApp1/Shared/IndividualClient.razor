@if (Client != null)
{
    @if (!IsTable)
    {
        <EditForm Model="Client" OnValidSubmit="EditClient" class="form-control">
            <div class="row">
                <div class="col-sm-10">
                    <label class="col-sm-2 col-form-label">Name</label>
                    <input type="text" class="form-control" id="inputEmail3" placeholder="@Client.Name" readonly>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-10">
                    <label class="col-sm-2 col-form-label">Create Data</label>
                    <input type="datetime" class="form-control" id="inputEmail3" placeholder="@Client.DataCreate" readonly>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-10">
                    <label class="col-sm-2 col-form-label">Status</label>
                    <InputSelect @bind-Value=@Client.Status class="form-control">
                        @foreach (var status in Enum.GetValues(typeof(ClientStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row gx-5">
                <div class="col-sm-10">
                    <button type="submit" class="btn btn-primary">Edit</button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <tr>
            <td>@Client.Id</td>
            <td>@Client.Name</td>
            <td>@Client.DataCreate</td>
            <td>@Client.Status</td>
            @if (IsWithButtons)
            {
                <td class="col-2">
                    <a class="btn btn-success" href="@url">Open</a>
                    <button class="btn btn-primary">Edit</button>
                    <button class="btn btn-danger" @onclick="(() => DeleteTheClient.InvokeAsync(Client))">Delete</button>
                </td>
            }

        </tr>
    }
}
@code {
    [Parameter] public Client Client { get; set; }
    [Parameter] public bool IsTable { get; set; }
    [Parameter] public bool IsWithButtons { get; set; } = true;

    [Parameter] public EventCallback<Client> DeleteTheClient { get; set; }

    string url;
    IEnumerable<ClientStatus> statuses = Enumerable.Empty<ClientStatus>();
    IEnumerable<ClientStatus> unSelectedStatus => statuses.Where(status => status != Client.Status);


    protected override void OnInitialized()
    {
        url = $"clients/{Client.Id}";
    }

    void EditClient()
    {

    }

}
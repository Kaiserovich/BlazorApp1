@page "/clients/{ClientId:int}"
@inject IOrderService dbOrder
@inject IClientService dbClient
@inject ILoggerManager logger

@if (client is not null)
{
    <PageTitle>Client @client.Name</PageTitle>
    <h3>
        Client page
    </h3>

    <div class="row">
        <div class="col">
            <EditClient Client="client"/>
        </div>

        <div class="col">
            <h4>Orders of the selected client</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">

                    <thead class="thead-dark">
                        <tr>
                            <th>Order Id</th>
                            <th>Decription</th>
                            <th>Date</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Currency</th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        <GenericList ListOfItems="ordersByClient">
                            <ItemTemplate Context="order">
                                <RowOrder Order="order" IsVisibleClientId="false" DeleteTheOrder="DeleteTheOrder"/>
                            </ItemTemplate>
                        </GenericList>
                    </tbody>

                </table>
            </div>
        </div>
    </div>

    <PopUp @ref="deleteOrderPopUp" NameAction="Delete" OnConfirm="OnDeleteConfirm" OnCancel="OnDeleteCancel">
        <div class="text-danger">Do you wish to delete order: ID:@orderToBeDeleted.Id ?</div>
    </PopUp>
}
else
{
    <Loading />
}

@code {
    [Parameter] public int ClientId { get; set; }

    Client? client;
    List<Order> ordersByClient;
    Order orderToBeDeleted;
    PopUp deleteOrderPopUp;

    protected async override Task OnInitializedAsync()
    {
        logger.LogDebug($"OnInitializedAsync DetailsClient page");

        client = await dbClient.GetClientByIdAsync(ClientId);
        ordersByClient = dbOrder.GetOrdersByClientId(ClientId);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        logger.LogDebug($"OnAfterRender DetailsClient page, firstRender = {firstRender}");
    }
    void DeleteTheOrder(Order order)
    {
        if (order != null)
        {
            orderToBeDeleted = order;
            deleteOrderPopUp.Show();
        }
    }
    void OnDeleteConfirm()
    {
        deleteOrderPopUp.Hide();
        
        ordersByClient.Remove(orderToBeDeleted);
        dbOrder.DeleteOrder(orderToBeDeleted);
    }
    void OnDeleteCancel()
    {
        deleteOrderPopUp.Hide();
    }
}

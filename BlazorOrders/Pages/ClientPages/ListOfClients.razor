@page "/clients"
@inject IClientService dbClient
@inject IOrderService dbOrder

<PageTitle>List of clients</PageTitle>

<h2>List of clients</h2>
<div class="row">
    <div class="col">
        <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter... (name)"
                   @bind="filter"
                   @bind:event="oninput">
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Create Data</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (clients == null)
                    {
                        <Loading />
                    }
                    else if (clients.Count == 0)
                    {
                        <img src="https://i.pinimg.com/originals/ae/8a/c2/ae8ac2fa217d23aadcc913989fcc34a2.png" height="200" />
                    }
                    else
                    {
                        @foreach (var item in clients)
                        {
                            @if (!IsVisible(item))
                                continue;
                            <RowClient Client="item" DeleteTheClient="DeleteTheClient" />
                        }
                    }
                    <PopUp @ref="deletePopUp" NameAction="Delete" OnConfirm="OnDeleteConfirm" OnCancel="OnDeleteCancel" isVisibleConfirmButton="!clientToBeDeletedHasOrders">
                        @if (clientToBeDeletedHasOrders)
                        {
                            <div class="text-danger">Client: ID:@clientToBeDeleted.Id cannot be deleted, because deleting a client is available only if there are no orders</div>
                        }
                        else
                        {
                            <div class="text-danger">Do you wish to delete client: ID:@clientToBeDeleted.Id ?</div>
                        }
                    </PopUp>
                </tbody>
            </table>
        </div>
    </div>
    <AuthorizeView>
        <div class="col-4">
            <AddClient AddTheClient="AddTheClient" />
        </div>
    </AuthorizeView>

</div>

@code {
    string? filter;

    List<Client>? clients;
    PopUp deletePopUp;
    Client? clientToBeDeleted;
    bool clientToBeDeletedHasOrders = false;

    protected async override Task OnInitializedAsync()
    {
        clients = await dbClient.GetAllClientsAsync();
    }
    public bool IsVisible(Client client)
    {
        if (string.IsNullOrEmpty(filter))
            return true;

        if (client.Name.Contains(filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
    void DeleteTheClient(Client client)
    {
        if (client != null)
        {
            if (dbOrder.GetOrdersByClientId(client.Id).Count() == 0)
            {
                clientToBeDeletedHasOrders = false;
            }
            else
            {
                clientToBeDeletedHasOrders = true;
            }
            clientToBeDeleted = client;
            deletePopUp.Show();
        }
    }
    void OnDeleteConfirm()
    {
        clients.Remove(clientToBeDeleted);
        deletePopUp.Hide();

        dbClient.DeleteClient(clientToBeDeleted);
    }
    void OnDeleteCancel()
    {
        deletePopUp.Hide();
    }
    void AddTheClient(Client client)
    {
        if (client != null)
            clients.Add(client);
    }
}

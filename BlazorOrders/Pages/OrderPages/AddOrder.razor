@page "/orders/add"

@inject IOrderService dbOrder
@inject IClientService dbClient

<div class="card">
    <div class="card-header">
        <h3>Create a new order</H3>
    </div> 

    <div class="card-body">
        <EditForm Model="newOrder" OnValidSubmit="CreateNewOrderAsync" >
            <DataAnnotationsValidator />
            <div class="input-group mb-3">
                <span class="input-group-text">Decription:</span>
                <InputText @bind-Value="newOrder.Decription" type="text" placeholder="Input text" class="form-control" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Price:</span>
                <InputNumber @bind-Value="newOrder.Price" type="text" class="form-control" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Client ID:</span>
                @if (thereAreClientsInAnActiveStatus)
                {
                    <InputSelect @bind-Value=@newOrder.ClientId class="form-control" >
                            @foreach (var clientByActiveStatus in clientsByActiveStatus)
                            {
                                <option value="@clientByActiveStatus.Id">@clientByActiveStatus.Name</option>
                            }
                    </InputSelect>
                }
                else
                {
                    <span class="input-group-text text-danger" disabled="true">There are no clients in an active status</span>
                }
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Currency:</span>
                <InputSelect @bind-Value=@newOrder.Currency class="form-control" >
                    @foreach (var сurrency in Enum.GetValues(typeof(CurrencyType)))
                    {
                        <option value="@сurrency">@сurrency</option>
                    }
                    </InputSelect>
            </div>
            <div class="mb-3">
                <ValidationSummary/>
            </div>
            @if (thereAreClientsInAnActiveStatus)
            {
                <div class="mb-3">
                    <button class="btn btn-outline-success">Add</button>
                    <span class="text-danger">@message</span>
                </div>
            }
            @if (displaySuccessMessage)
            {
                <SuccessMessage />
            }
        </EditForm>
    </div>
</div>


@code {
    Order newOrder = new();

    List<Client> clientsByActiveStatus;
    bool thereAreClientsInAnActiveStatus = false;

    bool displaySuccessMessage = false;

    string message;

    protected async override Task OnInitializedAsync()
    {
        clientsByActiveStatus = await dbClient.GetClientsByStatusAsync(ClientStatus.Active);
        if (clientsByActiveStatus.Count() != 0)
        {
            thereAreClientsInAnActiveStatus = true;
            newOrder.ClientId = clientsByActiveStatus.First().Id;
        }
    }
    async Task CreateNewOrderAsync()
    {
        await dbOrder.CreateOrderAsync(newOrder);

        displaySuccessMessage = true;
        newOrder = new();
        newOrder.ClientId = clientsByActiveStatus.First().Id;
    }
}
@page "/orders"
@inject IRepositoryWrapper db

<PageTitle>List of orders</PageTitle>

<h2>List of orders</h2>
<div class="row">
    <div class="col">
        <div class="table-responsive">
            <div class="form-group">
                <input class="form-control" type="text" placeholder="Filter... (Client ID, Date, Price, Currency ID)"
                       @bind="filter"
                       @bind:event="oninput">
            </div>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Order Id</th>
                        <th>Client Id</th>
                        <th>Decription</th>
                        <th>Date</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Currency Id</th>
                    </tr>
                </thead>
                <tbody>
                    @if (orders == null)
                    {
                        <Loading />
                    }
                    else if (orders.Count == 0)
                    {
                        <img src="https://i.pinimg.com/originals/ae/8a/c2/ae8ac2fa217d23aadcc913989fcc34a2.png" height="200" />
                    }
                    else
                    {
                        @foreach (var item in orders)
                        {
                            @if (!IsVisible(item))
                                continue;
                            <RowOrder Order="item" DeleteTheOrder="DeleteTheOrder" />
                        }
                    }
                    <PopUp @ref="deletePopUp" NameAction="Delete" OnConfirm="OnDeleteConfirmAsync" OnCancel="OnDeleteCancel">
                        <div class="text-danger">Do you wish to delete order: ID:@orderToBeDeleted.Id ?</div>
                    </PopUp>
                </tbody>
            </table>
        </div>
    </div>

    <div class="col col-4">
        <AddOrder AddTheOrder="AddTheOrder" />

    </div>
</div>

@code {
    List<Order>? orders;
    Order orderToBeDeleted;
    PopUp deletePopUp;
    string filter;

    protected async override Task OnInitializedAsync()
    {
        orders = await db.Order.GetAllOrdersAsync();
    }
    public bool IsVisible(Order order)
    {
        if (string.IsNullOrEmpty(filter))
            return true;

        if (order.Date.ToString().Contains(filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (order.ClientId.ToString().StartsWith(filter))
            return true;

        if (order.CurrencyId.ToString().StartsWith(filter))
            return true;

        if (order.Price.ToString().StartsWith(filter))
            return true;

        return false;
    }
    void DeleteTheOrder(Order order)
    {
        if (order != null)
        {
            orderToBeDeleted = order;
            deletePopUp.Show();
        }
    }
    async void OnDeleteConfirmAsync()
    {
        orders.Remove(orderToBeDeleted);
        OnDeleteCancel();

        db.Order.DeleteOrder(orderToBeDeleted);
        await db.SaveAsync();

    }
    void OnDeleteCancel()
    {
        deletePopUp.Hide();
    }
    void AddTheOrder(Order order)
    {
        if (order != null)
            orders.Add(order);
    }
}
